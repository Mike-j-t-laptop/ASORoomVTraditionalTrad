package aso.asoroomvtraditionaltrad;

import android.database.sqlite.SQLiteDatabase;

public class AllTables {

    public static final String DBNAME = "testdb";
    public static final String DBTABLE_ALBUMS = "albums";
    public static final String DBTABLE_ARTISTS = "artists";
    public static final String DBTABLE_CUSTOMERS = "customers";
    public static final String DBTABLE_EMPLOYEES = "employees";
    public static final String DBTABLE_GENRES = "genres";
    public static final String DBTABLE_INVOICES = "invoices";
    public static final String DBTABLE_INVOICEITEMS = "invoice_items";
    public static final String DBTABLE_MEDIATYPES = "media_types";
    public static final String DBTABLE_PLAYLISTS = "playlists";
    public static final String DBTABLE_PLAYLISTTRACK = "playlist_track";
    public static final String DBTABLE_TRACKS = "tracks";

    public static void createAllTables(SQLiteDatabase _db) {

        // NOTE Method copied from code as generated by ROOM as per ASORoomvTraditionalRoom
        _db.execSQL("CREATE TABLE IF NOT EXISTS `albums` (`AlbumId` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, `Title` TEXT NOT NULL, `ArtistId` INTEGER NOT NULL, FOREIGN KEY(`ArtistId`) REFERENCES `artists`(`ArtistId`) ON UPDATE NO ACTION ON DELETE NO ACTION )");
        _db.execSQL("CREATE INDEX IF NOT EXISTS `IFK_AlbumArtistId` ON `albums` (`ArtistId`)");
        _db.execSQL("CREATE TABLE IF NOT EXISTS `artists` (`ArtistId` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, `Name` TEXT)");
        _db.execSQL("CREATE TABLE IF NOT EXISTS `customers` (`CustomerId` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, `FirstName` TEXT NOT NULL, `LastName` TEXT NOT NULL, `Company` TEXT, `Address` TEXT, `City` TEXT, `State` TEXT, `Country` TEXT, `PostalCode` TEXT, `Phone` TEXT, `Fax` TEXT, `Email` TEXT NOT NULL, `SupportRepId` INTEGER NOT NULL, FOREIGN KEY(`SupportRepId`) REFERENCES `employees`(`EmployeeId`) ON UPDATE NO ACTION ON DELETE NO ACTION )");
        _db.execSQL("CREATE INDEX IF NOT EXISTS `IFK_CustomerSupportRepId` ON `customers` (`SupportRepId`)");
        _db.execSQL("CREATE TABLE IF NOT EXISTS `employees` (`EmployeeId` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, `LastName` TEXT NOT NULL, `FirstName` TEXT NOT NULL, `Title` TEXT, `ReportsTo` INTEGER NOT NULL, `BirthDate` TEXT, `HireDate` TEXT, `Address` TEXT, `City` TEXT, `State` TEXT, `Country` TEXT, `PostalCode` TEXT, `Phone` TEXT, `Fax` TEXT, `Email` TEXT, FOREIGN KEY(`ReportsTo`) REFERENCES `employees`(`EmployeeId`) ON UPDATE NO ACTION ON DELETE NO ACTION )");
        _db.execSQL("CREATE INDEX IF NOT EXISTS `IFK_EmployeeReportsTo` ON `employees` (`ReportsTo`)");
        _db.execSQL("CREATE TABLE IF NOT EXISTS `genres` (`GenreId` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, `Name` TEXT)");
        _db.execSQL("CREATE TABLE IF NOT EXISTS `invoices` (`InvoiceId` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, `CustomerId` INTEGER NOT NULL, `InvoiceDate` TEXT NOT NULL, `BillingAddress` TEXT, `BillingCity` TEXT, `BillingState` TEXT, `BillingCountry` TEXT, `BillingPostalCode` TEXT, `Total` TEXT NOT NULL, FOREIGN KEY(`CustomerId`) REFERENCES `customers`(`CustomerId`) ON UPDATE NO ACTION ON DELETE NO ACTION )");
        _db.execSQL("CREATE INDEX IF NOT EXISTS `IFK_InvoiceCustomerId` ON `invoices` (`CustomerId`)");
        _db.execSQL("CREATE TABLE IF NOT EXISTS `invoice_items` (`InvoiceLineId` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, `InvoiceId` INTEGER NOT NULL, `TrackId` INTEGER NOT NULL, `UnitPrice` TEXT NOT NULL, `Quantity` INTEGER NOT NULL, FOREIGN KEY(`TrackId`) REFERENCES `tracks`(`TrackId`) ON UPDATE NO ACTION ON DELETE NO ACTION , FOREIGN KEY(`InvoiceId`) REFERENCES `invoices`(`InvoiceId`) ON UPDATE NO ACTION ON DELETE NO ACTION )");
        _db.execSQL("CREATE INDEX IF NOT EXISTS `IFK_InvoiceLineInvoiceId` ON `invoice_items` (`InvoiceId`)");
        _db.execSQL("CREATE INDEX IF NOT EXISTS `IFK_InvoiceLineTrackId` ON `invoice_items` (`TrackId`)");
        _db.execSQL("CREATE TABLE IF NOT EXISTS `media_types` (`MediaTypeId` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, `Name` TEXT)");
        _db.execSQL("CREATE TABLE IF NOT EXISTS `playlists` (`PlaylistId` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, `Name` TEXT)");
        _db.execSQL("CREATE TABLE IF NOT EXISTS `playlist_track` (`PlaylistId` INTEGER NOT NULL, `TrackId` INTEGER NOT NULL, PRIMARY KEY(`PlaylistId`, `TrackId`), FOREIGN KEY(`TrackId`) REFERENCES `tracks`(`TrackId`) ON UPDATE NO ACTION ON DELETE NO ACTION , FOREIGN KEY(`PlaylistId`) REFERENCES `playlists`(`PlaylistId`) ON UPDATE NO ACTION ON DELETE NO ACTION )");
        _db.execSQL("CREATE INDEX IF NOT EXISTS `IFK_PlaylistTrackTrackId` ON `playlist_track` (`TrackId`)");
        _db.execSQL("CREATE TABLE IF NOT EXISTS `tracks` (`TrackId` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, `Name` TEXT NOT NULL, `AlbumId` INTEGER NOT NULL, `MediaTypeId` INTEGER NOT NULL, `GenreId` INTEGER NOT NULL, `Composer` TEXT, `Milliseconds` INTEGER NOT NULL, `Bytes` INTEGER, `UnitPrice` TEXT NOT NULL, FOREIGN KEY(`MediaTypeId`) REFERENCES `media_types`(`MediaTypeId`) ON UPDATE NO ACTION ON DELETE NO ACTION , FOREIGN KEY(`GenreId`) REFERENCES `genres`(`GenreId`) ON UPDATE NO ACTION ON DELETE NO ACTION , FOREIGN KEY(`AlbumId`) REFERENCES `albums`(`AlbumId`) ON UPDATE NO ACTION ON DELETE NO ACTION )");
        _db.execSQL("CREATE INDEX IF NOT EXISTS `IFK_TrackAlbumId` ON `tracks` (`AlbumId`)");
        _db.execSQL("CREATE INDEX IF NOT EXISTS `IFK_TrackGenreId` ON `tracks` (`GenreId`)");
        _db.execSQL("CREATE INDEX IF NOT EXISTS `IFK_TrackMediaTypeId` ON `tracks` (`MediaTypeId`)");
        //_db.execSQL("CREATE TABLE IF NOT EXISTS room_master_table (id INTEGER PRIMARY KEY,identity_hash TEXT)");
        //_db.execSQL("INSERT OR REPLACE INTO room_master_table (id,identity_hash) VALUES(42, '5882e83fe60872c90b566efba72ba7d2')");
    }

    public static class Albums {

        //References Artists
        public static final String TABLENAME = DBTABLE_ALBUMS;
        public static final String COL_ALBUMID = "AlbumId";
        public static final String COL_TITLE = "Title";
        public static final String COL_ARTISTID = "ArtistId";
    }

    public static class Artists {
        public static final String TABLENAME = DBTABLE_ARTISTS;
        public static final String COL_ARTISTID = "ArtistId";
        public static final String COL_NAME = "Name";
    }

    public static class Customers {

        //References Employees
        public static final String TABLENAME = DBTABLE_CUSTOMERS;
        public static final String COl_CUSTOMERID = "CustomerId";
        public static final String COl_FIRSTNAME = "FirstName";
        public static final String COL_LASTNAME = "LastName";
        public static final String COL_COMPANY = "Company";
        public static final String COL_ADDRESS = "Address";
        public static final String COL_CITY = "City";
        public static final String COL_STATE = "State";
        public static final String COL_COUNTRY = "Country";
        public static final String COl_POSTCODE = "PostalCode";
        public static final String COL_PHONE = "Phone";
        public static final String COl_FAX = "Fax";
        public static final String COL_EMAIL = "Email";
        public static final String COL_SUPPORTREPID = "SupportRepId";
    }

    public static class Employees {

        //!!!SELF REFERENCING !!!
        public static final String TABLENAME = DBTABLE_EMPLOYEES;
        public static final String COL_EMPLOYEEID = "EmployeeId";
        public static final String COL_LASTNAME = "LastName";
        public static final String COL_FIRSTNAME = "FirstName";
        public static final String COL_TITLE = "Title";
        public static final String COL_REPORTSTO = "ReportsTo";
        public static final String COL_BIRTHDATE = "BirthDate";
        public static final String COL_HIREDATE = "HireDate";
        public static final String COL_ADDRESS = "Address";
        public static final String COL_CITY = "City";
        public static final String COL_STATE = "State";
        public static final String COL_COUNTRY = "Country";
        public static final String COL_POSTCODE = "PostalCode";
        public static final String COL_PHONE = "Phone";
        public static final String COl_FAX = "Fax";
        public static final String COL_EMAIL = "Email";
    }

    public static final class Genres {

        /*
        `GenreId` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, `Name` TEXT
         */
        public static final String TABLENAME = DBTABLE_GENRES;
        public static final String COL_GENREID = "GenreId";
        public static final String COL_NAME = "Name";
    }

    public static final class Invoices {

        // REFERENCES Customers
        public static final String TABLENAME = DBTABLE_INVOICES;
        public static final String COL_INVOICEID = "InvoiceId";
        public static final String COL_CUSTOMERID = "CustomerId";
        public static final String COL_INVOICEDATE = "InvoiceDate";
        public static final String COL_BILLINGADDRESS = "BillingAddress";
        public static final String COL_BILLINGCITY = "BillingCity";
        public static final String COL_BILLINGSTATE = "BillingState";
        public static final String COL_BILLINGCOUNTRY = "BillingCountry";
        public static final String COL_BILLINGPOSTCODE = "BillingPostalCode";
        public static final String COL_TOTAL = "Total";
    }

    public static final class InvoiceItems {

        /*
            InvoiceLineId` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
            `InvoiceId` INTEGER NOT NULL,
            `TrackId` INTEGER NOT NULL,
            `UnitPrice` TEXT NOT NULL,
            `Quantity` INTEGER NOT NULL,
            FOREIGN KEY(`TrackId`) REFERENCES `tracks`(`TrackId`) ON UPDATE NO ACTION ON DELETE NO ACTION ,
            FOREIGN KEY(`InvoiceId`) REFERENCES `invoices`(`InvoiceId`) ON UPDATE NO ACTION ON DELETE NO ACTION
         */

        //REFERENCES TRACKS and INVOICES
        public static final String TABLENAME = DBTABLE_INVOICEITEMS;
        public static final String COl_INVOICEITEMID = "InvoiceLineId";
        public static final String COl_INVOICEID = "InvoiceId";
        public static final String COL_TRACKID = "TrackId";
        public static final String COL_UNITPRICE = "UnitPrice";
        public static final String COL_QUANTITY = "Quantity";
    }

    public static final class MediaTypes {

        public static final String TABLENAME = DBTABLE_MEDIATYPES;
        public static final String COL_MEDIATYPEID = "MediaTypeId";
        public static final String COl_NAME = "Name";
    }



    public static final class PlayLists {

        /*
            `playlists` (`PlaylistId` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, `Name` TEXT)
         */
        public static final String TABLENAME = DBTABLE_PLAYLISTS;
        public static final String COL_PLAYLISTID = "PlaylistId";
        public static final String COl_NAME = "Name";
    }

    public static final class PlayListTracks {

    /*
        playlist_track` (`PlaylistId` INTEGER NOT NULL, `TrackId` INTEGER NOT NULL, PRIMARY KEY(`PlaylistId`, `TrackId`), FOREIGN KEY(`TrackId`) REFERENCES `tracks`(`TrackId`) ON UPDATE NO ACTION ON DELETE NO ACTION , FOREIGN KEY(`PlaylistId`) REFERENCES `playlists`(`PlaylistId`) ON UPDATE NO ACTION ON DELETE NO ACTION
     */
        // REFERENCES PLAYLIST AND TRACK IE MAPPING TABLE
        public static final String TABLENAME = DBTABLE_PLAYLISTTRACK;
        public static final String COL_PLAYLISTID = "PlaylistId";
        public static final String COL_TRACKID = "TrackId";
    }

    public static final class Tracks {

        /*
            `tracks` (
            `TrackId` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
            `Name` TEXT NOT NULL,
            `AlbumId` INTEGER NOT NULL,
            `MediaTypeId` INTEGER NOT NULL,
            `GenreId` INTEGER NOT NULL,
            `Composer` TEXT,
            `Milliseconds` INTEGER NOT NULL,
            `Bytes` INTEGER,
            `UnitPrice` TEXT NOT NULL,
            FOREIGN KEY(`MediaTypeId`) REFERENCES `media_types`(`MediaTypeId`) ON UPDATE NO ACTION ON DELETE NO ACTION ,
            FOREIGN KEY(`GenreId`) REFERENCES `genres`(`GenreId`) ON UPDATE NO ACTION ON DELETE NO ACTION ,
            FOREIGN KEY(`AlbumId`) REFERENCES `albums`(`AlbumId`) ON UPDATE NO ACTION ON DELETE NO ACTION
         */

        // REFERENCES MediaTypes, Genres and Albums

        public static final String TABLENAME = DBTABLE_TRACKS;
        public static final String COL_TRACKID = "TrackId";
        public static final String COL_NAME = "Name";
        public static final String COL_ALBUMID = "AlbumId";
        public static final String COL_MEDIATYPEID = "MediaTypeId";
        public static final String COl_GENREID = "GenreId";
        public static final String COL_COMPOSER = "Composer";
        public static final String COL_MILLISECONDS = "Milliseconds";
        public static final String COL_BYTES = "Bytes";
        public static final String COl_UNITPRICE = "UnitPrice";
    }
}
